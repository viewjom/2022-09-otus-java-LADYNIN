plugins {
    id 'java'
    id 'com.google.cloud.tools.jib'
    id 'org.springframework.boot'
    id "fr.brouillard.oss.gradle.jgitver"
}

apply from: 'jib.gradle'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

jgitver {
    strategy = "PATTERN"
    nonQualifierBranches = "main"
    tagVersionPattern = "\${v}\${<meta.DIRTY_TEXT}"
    versionPattern =
            "\${v}\${<meta.COMMIT_DISTANCE}\${<meta.GIT_SHA1_8}" +
                    "\${<meta.QUALIFIED_BRANCH_NAME}\${<meta.DIRTY_TEXT}-SNAPSHOT"
}

dependencies {
    //implementation("org.springframework.boot:spring-boot-starter-data-jpa")

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")

    implementation("org.hibernate:hibernate-core")




    implementation("org.springframework.boot:spring-boot-starter-test")
    implementation("org.springframework.boot:spring-boot-starter-amqp")

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.3.0.RELEASE'

    implementation("org.bouncycastle:bcpg-jdk15on:${Versions.bouncycastle}")
    implementation("org.bouncycastle:bcprov-jdk15on:${Versions.bouncycastle}")

    implementation 'org.apache.kafka:kafka-clients'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    implementation('javax.servlet:jstl')
    implementation("org.apache.tomcat.embed:tomcat-embed-jasper")

    testImplementation "org.testcontainers:kafka"

    implementation("com.google.code.gson:gson")


    implementation 'ch.qos.logback:logback-classic'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.postgresql:postgresql'
    //gost
  //  implementation 'org.bouncycastle:bcpg-jdk15on:1.56'
  //  implementation 'org.bouncycastle:bcprov-jdk15on:1.56'


    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.projectlombok:lombok:1.18.22'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}


compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.with {
        encoding = 'UTF-8'
    }
}